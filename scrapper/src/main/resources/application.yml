app:
  database-access-type: jdbc

  scheduler:
    enable: true
    interval: 20s
    force-check-delay: 10s
    check-interval: 100s

  retry:
    max-attempts: 3
    retry-status-codes: 500, 502, 503, 504
    type: linear
    delay-config:
      constant:
        back-off-period-millis: 1000
      linear:
        initial-interval-millis: 1000
        max-interval-millis: 5000
      exponential:
        initial-interval-millis: 1000
        multiplier: 2
        max-interval-millis: 100000

  use-queue: true

  kafka-config:
    servers: 127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094
    topics:
      name: scrapper.updates
      partitions: 2
      replicas: 2

client:
  bot:
    base-url: https://localhost:8090
  github:
    base-url: https://api.github.com
  stackoverflow:
    base-url: https://api.stackexchange.com/2.3

springdoc:
  swagger-ui:
    path: /swagger-ui

spring:
  liquibase:
    enabled: false
  application:
    name: scrapper

  datasource:
    url: jdbc:postgresql://localhost:5432/scrapper
    username: postgres
    password: postgres
    driverClassName: org.postgresql.Driver

  cache:
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=60s
    cache-names:
      - rate-limit-buckets-scrapper


bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets-scrapper
      url: /.*
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - bandwidths:
            - capacity: 100
              time: 1
              unit: minutes
              refill-speed: interval

management:
  server:
    port: 8081
  endpoint:
    info:
      enabled: true
    prometheus:
      enabled: true
    health:
      enabled: true
  endpoints:
    web:
      base-path: /
      exposure:
        include:
          - info
          - prometheus
          - health
      path-mapping:
        prometheus: /metrics
  metrics:
    tags:
      application: ${spring.application.name}

server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml
